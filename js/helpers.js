function stringToMap(string){	var map = new Array();	var lines = string.split('-');	for(l in lines){		row = new Array();		tiles = lines[l].split(',');		for(t in tiles)			row.push(parseInt(tiles[t]));		map.push(row);	};	return map;}function drawMap(map, context2D, tileSize, tileimages){	for(i in map)		for(j in map[i]){			tile = map[i][j];			if(tile>0)				context2D.drawImage(tileimages[tile], j*tileSize, i*tileSize, tileSize, tileSize);		}				}function Point(x, y){	this.x = x;	this.y = y;		this.print = function(){		alert(this.x+", "+this.y);	}		this.equals = function(point2){		return this.x==point2.x && this.y==point2.y;	}}function Rectangle(x, y, w, h){	this.x = x;	this.y = y;	this.w = w;	this.h = h;		this.contains = function(point){		if(this.x < point.x && this.x+this.w > point.x &&			this.y < point.y && this.y+this.h > point.y)			return true;		return false;	}		this.topleft = function(){		return new Point(this.x, this.y);	}		this.topright = function(){		return new Point(this.x+this.w, this.y);	}		this.bottomleft = function(){		return new Point(this.x, this.y+this.w);	}		this.bottomright = function(){		return new Point(this.x+this.w, this.y+this.h);	}		this.center = function(){		return new Point(this.x+this.w/2, this.y+this.h/2);	}		this.topcenter = function(){		return new Point(this.x+this.w/2, this.y);	}		this.leftcenter = function(){		return new Point(this.x, this.y+this.h/2);	}		this.bottomcenter = function(){		return new Point(this.x+this.w/2, this.y+this.h);	}		this.rightcenter = function(){		return new Point(this.x+this.w, this.y+this.h/2);	}		this.getCornersAndMiddles = function(){		return new Array(this.topleft(), this.topcenter(), this.topright(), this.rightcenter(),			this.bottomright(), this.bottomcenter(), this.bottomleft(), this.leftcenter());	}		this.getCorners = function(){		return new Array(this.topleft(), this.topright(), this.bottomright(), this.bottomleft());	}		this.print = function(){		alert(this.x+" "+this.y+" "+this.w+" "+this.h);	}}function toGridCoord(point, gridsize){	return new Point(Math.floor(point.x/gridsize), Math.floor(point.y/gridsize));}function rectFromGridCoord(point, gridsize){	return new Rectangle(point.x*gridsize, point.y*gridsize, gridsize, gridsize);}function getSurroundingRect(point, padding){	return new Rectangle(point.x-padding, point.y-padding, 2*padding, 2*padding);}function isWall(themap, gridpoint){	if(themap[gridpoint.y][gridpoint.x]==1)		return true;	return false;}function isLadder(themap, gridpoint){	if(themap[gridpoint.y][gridpoint.x]==2)		return true;	return false;}function isTile(themap, gridpoint, tileconst){	if(themap[gridpoint.y][gridpoint.x]==tileconst)		return true;	return false;}function clearTile(themap, gridpoint){	themap[gridpoint.y][gridpoint.x] = 0;}function gridBox(gridpoint, tilesize){	return new Rectangle(gridpoint.x*tilesize, gridpoint.y*tilesize, tilesize, tilesize);}function playSound(name){	channels[currentChannel].src = document.getElementById(name).src;	channels[currentChannel].load();	channels[currentChannel].play();	currentChannel++;	if(currentChannel==channels.length)		currentChannel = 0;}function addScore(n){	score = score + n;	var scoretext = $("#score")[0];	scoretext.innerHTML = score; }